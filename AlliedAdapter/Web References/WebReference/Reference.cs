//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace AlliedAdapter.WebReference {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InstantCardSoap", Namespace="http://tempuri.org/")]
    public partial class InstantCard : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ImportCustomerOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public InstantCard() {
            this.Url = global::AlliedAdapter.Properties.Settings.Default.AlliedAdapter_WebReference_InstantCard;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ImportCustomerCompletedEventHandler ImportCustomerCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportCustomer(
                    string ActionCode, 
                    string CNIC, 
                    string TrackingID, 
                    string FullName, 
                    string DateOfBirth, 
                    string MothersName, 
                    string BillingFlag, 
                    string MobileNumber, 
                    string ActivationDate, 
                    string FathersName, 
                    string CardName, 
                    string CustomerType, 
                    string ProductCode, 
                    string AccountNo, 
                    string AccountType, 
                    string AccountCurrency, 
                    string AccountStatus, 
                    string AccountTitle, 
                    string BankIMD, 
                    string Branchcode, 
                    string DefaultAccount, 
                    string Title, 
                    string Prefered_Address_FLag, 
                    string HomeAddress1, 
                    string HomeAddress2, 
                    string HomeAddress3, 
                    string HomeAddress4, 
                    string HomePostalCode, 
                    string HomePhone, 
                    string Email, 
                    string Company, 
                    string OfficeAddress1, 
                    string OfficeAddress2, 
                    string OfficeAddress3, 
                    string OfficeAddress4, 
                    string OfficeAddress5, 
                    string OfficePostalCode, 
                    string OfficePhone, 
                    string PassportNo, 
                    string Nationality, 
                    string OldCardNumber) {
            object[] results = this.Invoke("ImportCustomer", new object[] {
                        ActionCode,
                        CNIC,
                        TrackingID,
                        FullName,
                        DateOfBirth,
                        MothersName,
                        BillingFlag,
                        MobileNumber,
                        ActivationDate,
                        FathersName,
                        CardName,
                        CustomerType,
                        ProductCode,
                        AccountNo,
                        AccountType,
                        AccountCurrency,
                        AccountStatus,
                        AccountTitle,
                        BankIMD,
                        Branchcode,
                        DefaultAccount,
                        Title,
                        Prefered_Address_FLag,
                        HomeAddress1,
                        HomeAddress2,
                        HomeAddress3,
                        HomeAddress4,
                        HomePostalCode,
                        HomePhone,
                        Email,
                        Company,
                        OfficeAddress1,
                        OfficeAddress2,
                        OfficeAddress3,
                        OfficeAddress4,
                        OfficeAddress5,
                        OfficePostalCode,
                        OfficePhone,
                        PassportNo,
                        Nationality,
                        OldCardNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportCustomerAsync(
                    string ActionCode, 
                    string CNIC, 
                    string TrackingID, 
                    string FullName, 
                    string DateOfBirth, 
                    string MothersName, 
                    string BillingFlag, 
                    string MobileNumber, 
                    string ActivationDate, 
                    string FathersName, 
                    string CardName, 
                    string CustomerType, 
                    string ProductCode, 
                    string AccountNo, 
                    string AccountType, 
                    string AccountCurrency, 
                    string AccountStatus, 
                    string AccountTitle, 
                    string BankIMD, 
                    string Branchcode, 
                    string DefaultAccount, 
                    string Title, 
                    string Prefered_Address_FLag, 
                    string HomeAddress1, 
                    string HomeAddress2, 
                    string HomeAddress3, 
                    string HomeAddress4, 
                    string HomePostalCode, 
                    string HomePhone, 
                    string Email, 
                    string Company, 
                    string OfficeAddress1, 
                    string OfficeAddress2, 
                    string OfficeAddress3, 
                    string OfficeAddress4, 
                    string OfficeAddress5, 
                    string OfficePostalCode, 
                    string OfficePhone, 
                    string PassportNo, 
                    string Nationality, 
                    string OldCardNumber) {
            this.ImportCustomerAsync(ActionCode, CNIC, TrackingID, FullName, DateOfBirth, MothersName, BillingFlag, MobileNumber, ActivationDate, FathersName, CardName, CustomerType, ProductCode, AccountNo, AccountType, AccountCurrency, AccountStatus, AccountTitle, BankIMD, Branchcode, DefaultAccount, Title, Prefered_Address_FLag, HomeAddress1, HomeAddress2, HomeAddress3, HomeAddress4, HomePostalCode, HomePhone, Email, Company, OfficeAddress1, OfficeAddress2, OfficeAddress3, OfficeAddress4, OfficeAddress5, OfficePostalCode, OfficePhone, PassportNo, Nationality, OldCardNumber, null);
        }
        
        /// <remarks/>
        public void ImportCustomerAsync(
                    string ActionCode, 
                    string CNIC, 
                    string TrackingID, 
                    string FullName, 
                    string DateOfBirth, 
                    string MothersName, 
                    string BillingFlag, 
                    string MobileNumber, 
                    string ActivationDate, 
                    string FathersName, 
                    string CardName, 
                    string CustomerType, 
                    string ProductCode, 
                    string AccountNo, 
                    string AccountType, 
                    string AccountCurrency, 
                    string AccountStatus, 
                    string AccountTitle, 
                    string BankIMD, 
                    string Branchcode, 
                    string DefaultAccount, 
                    string Title, 
                    string Prefered_Address_FLag, 
                    string HomeAddress1, 
                    string HomeAddress2, 
                    string HomeAddress3, 
                    string HomeAddress4, 
                    string HomePostalCode, 
                    string HomePhone, 
                    string Email, 
                    string Company, 
                    string OfficeAddress1, 
                    string OfficeAddress2, 
                    string OfficeAddress3, 
                    string OfficeAddress4, 
                    string OfficeAddress5, 
                    string OfficePostalCode, 
                    string OfficePhone, 
                    string PassportNo, 
                    string Nationality, 
                    string OldCardNumber, 
                    object userState) {
            if ((this.ImportCustomerOperationCompleted == null)) {
                this.ImportCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportCustomerOperationCompleted);
            }
            this.InvokeAsync("ImportCustomer", new object[] {
                        ActionCode,
                        CNIC,
                        TrackingID,
                        FullName,
                        DateOfBirth,
                        MothersName,
                        BillingFlag,
                        MobileNumber,
                        ActivationDate,
                        FathersName,
                        CardName,
                        CustomerType,
                        ProductCode,
                        AccountNo,
                        AccountType,
                        AccountCurrency,
                        AccountStatus,
                        AccountTitle,
                        BankIMD,
                        Branchcode,
                        DefaultAccount,
                        Title,
                        Prefered_Address_FLag,
                        HomeAddress1,
                        HomeAddress2,
                        HomeAddress3,
                        HomeAddress4,
                        HomePostalCode,
                        HomePhone,
                        Email,
                        Company,
                        OfficeAddress1,
                        OfficeAddress2,
                        OfficeAddress3,
                        OfficeAddress4,
                        OfficeAddress5,
                        OfficePostalCode,
                        OfficePhone,
                        PassportNo,
                        Nationality,
                        OldCardNumber}, this.ImportCustomerOperationCompleted, userState);
        }
        
        private void OnImportCustomerOperationCompleted(object arg) {
            if ((this.ImportCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportCustomerCompleted(this, new ImportCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ImportCustomerCompletedEventHandler(object sender, ImportCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591