//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace AlliedAdapter.CardListing {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wsABLCARDSTATUSCHANGESoap", Namespace="http://tempuri.org/")]
    public partial class wsABLCARDSTATUSCHANGE : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CardStatusChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CardListingOperationCompleted;
        
        private System.Threading.SendOrPostCallback FreshCardListingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wsABLCARDSTATUSCHANGE() {
            this.Url = global::AlliedAdapter.Properties.Settings.Default.AlliedAdapter_CardListing_wsABLCARDSTATUSCHANGE;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CardStatusChangeCompletedEventHandler CardStatusChangeCompleted;
        
        /// <remarks/>
        public event CardListingCompletedEventHandler CardListingCompleted;
        
        /// <remarks/>
        public event FreshCardListingCompletedEventHandler FreshCardListingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CardStatusChange", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CardStatusChange(string PAN, string Expirydate, string USERID, string Password, string NewcardStatus) {
            object[] results = this.Invoke("CardStatusChange", new object[] {
                        PAN,
                        Expirydate,
                        USERID,
                        Password,
                        NewcardStatus});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CardStatusChangeAsync(string PAN, string Expirydate, string USERID, string Password, string NewcardStatus) {
            this.CardStatusChangeAsync(PAN, Expirydate, USERID, Password, NewcardStatus, null);
        }
        
        /// <remarks/>
        public void CardStatusChangeAsync(string PAN, string Expirydate, string USERID, string Password, string NewcardStatus, object userState) {
            if ((this.CardStatusChangeOperationCompleted == null)) {
                this.CardStatusChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardStatusChangeOperationCompleted);
            }
            this.InvokeAsync("CardStatusChange", new object[] {
                        PAN,
                        Expirydate,
                        USERID,
                        Password,
                        NewcardStatus}, this.CardStatusChangeOperationCompleted, userState);
        }
        
        private void OnCardStatusChangeOperationCompleted(object arg) {
            if ((this.CardStatusChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CardStatusChangeCompleted(this, new CardStatusChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CardListing", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CardListing(string CNIC) {
            object[] results = this.Invoke("CardListing", new object[] {
                        CNIC});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CardListingAsync(string CNIC) {
            this.CardListingAsync(CNIC, null);
        }
        
        /// <remarks/>
        public void CardListingAsync(string CNIC, object userState) {
            if ((this.CardListingOperationCompleted == null)) {
                this.CardListingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardListingOperationCompleted);
            }
            this.InvokeAsync("CardListing", new object[] {
                        CNIC}, this.CardListingOperationCompleted, userState);
        }
        
        private void OnCardListingOperationCompleted(object arg) {
            if ((this.CardListingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CardListingCompleted(this, new CardListingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FreshCardListing", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FreshCardListing(string CNIC) {
            object[] results = this.Invoke("FreshCardListing", new object[] {
                        CNIC});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FreshCardListingAsync(string CNIC) {
            this.FreshCardListingAsync(CNIC, null);
        }
        
        /// <remarks/>
        public void FreshCardListingAsync(string CNIC, object userState) {
            if ((this.FreshCardListingOperationCompleted == null)) {
                this.FreshCardListingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFreshCardListingOperationCompleted);
            }
            this.InvokeAsync("FreshCardListing", new object[] {
                        CNIC}, this.FreshCardListingOperationCompleted, userState);
        }
        
        private void OnFreshCardListingOperationCompleted(object arg) {
            if ((this.FreshCardListingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FreshCardListingCompleted(this, new FreshCardListingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CardStatusChangeCompletedEventHandler(object sender, CardStatusChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CardStatusChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CardStatusChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CardListingCompletedEventHandler(object sender, CardListingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CardListingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CardListingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void FreshCardListingCompletedEventHandler(object sender, FreshCardListingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FreshCardListingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FreshCardListingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591